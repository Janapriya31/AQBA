{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\janap\\\\OneDrive\\\\Desktop\\\\one drive\\\\OneDrive\\\\Documents\\\\AQBA-AdminWeb\\\\AQBA-AdminWeb\\\\src\\\\admin\\\\pages\\\\ReportGeneration.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReportGeneration() {\n  _s();\n  const [reportType, setReportType] = useState('usage-statistics');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [reportData, setReportData] = useState(null); // Store generated report data\n\n  const handleGenerateReport = async () => {\n    // Example of fetching report data based on the selected type and date range\n    try {\n      const response = await fetch(`http://localhost:5000/generate-report`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          reportType,\n          startDate,\n          endDate\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setReportData(data); // Store the generated report data\n        console.log(`Generated ${reportType} report`, data);\n      } else {\n        console.error('Failed to generate report:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n    }\n  };\n  const handleExport = async format => {\n    // Example of exporting the report data\n    try {\n      const response = await fetch(`http://localhost:5000/export-report`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': format === 'Excel' ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : 'application/pdf'\n        },\n        body: JSON.stringify({\n          reportData,\n          format\n        })\n      });\n      if (response.ok) {\n        // Create a URL and download the file\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', `report.${format.toLowerCase()}`); // Set the file name\n        document.body.appendChild(link);\n        link.click();\n        link.parentNode.removeChild(link); // Clean up\n      } else {\n        console.error('Failed to export report:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error exporting report:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"centered-heading\",\n      children: \"Report Generation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Generate and download various system reports.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"report-type\",\n        children: \"Select Report Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"report-type\",\n        value: reportType,\n        onChange: e => setReportType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"usage-statistics\",\n          children: \"Usage Statistics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"questionbank-generation-summaries\",\n          children: \"Question Bank Generation Summaries\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"system-health-reports\",\n          children: \"System Health Reports\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"start-date\",\n        children: \"Start Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"start-date\",\n        value: startDate,\n        onChange: e => setStartDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"end-date\",\n        children: \"End Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"end-date\",\n        value: endDate,\n        onChange: e => setEndDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateReport,\n      children: \"Generate Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Export Options:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleExport('Excel'),\n        disabled: !reportData,\n        children: \"Export as Excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleExport('PDF'),\n        disabled: !reportData,\n        children: \"Export as PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(ReportGeneration, \"toFb6uZ99qCuSd8fAAJSUPaK5Qc=\");\n_c = ReportGeneration;\nexport default ReportGeneration;\nvar _c;\n$RefreshReg$(_c, \"ReportGeneration\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ReportGeneration","_s","reportType","setReportType","startDate","setStartDate","endDate","setEndDate","reportData","setReportData","handleGenerateReport","response","fetch","method","headers","body","JSON","stringify","ok","data","json","console","log","error","statusText","handleExport","format","blob","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","toLowerCase","appendChild","click","parentNode","removeChild","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","target","type","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/janap/OneDrive/Desktop/one drive/OneDrive/Documents/AQBA-AdminWeb/AQBA-AdminWeb/src/admin/pages/ReportGeneration.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction ReportGeneration() {\r\n  const [reportType, setReportType] = useState('usage-statistics');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [endDate, setEndDate] = useState('');\r\n  const [reportData, setReportData] = useState(null); // Store generated report data\r\n\r\n  const handleGenerateReport = async () => {\r\n    // Example of fetching report data based on the selected type and date range\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/generate-report`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ reportType, startDate, endDate }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setReportData(data); // Store the generated report data\r\n        console.log(`Generated ${reportType} report`, data);\r\n      } else {\r\n        console.error('Failed to generate report:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n    }\r\n  };\r\n\r\n  const handleExport = async (format) => {\r\n    // Example of exporting the report data\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/export-report`, {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Accept': format === 'Excel' ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : 'application/pdf'\r\n        },\r\n        body: JSON.stringify({ reportData, format }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Create a URL and download the file\r\n        const blob = await response.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', `report.${format.toLowerCase()}`); // Set the file name\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.parentNode.removeChild(link); // Clean up\r\n      } else {\r\n        console.error('Failed to export report:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error exporting report:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"centered-heading\">Report Generation</h2>\r\n      <p>Generate and download various system reports.</p>\r\n\r\n      {/* Report Type Selection */}\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"report-type\">Select Report Type:</label>\r\n        <select\r\n          id=\"report-type\"\r\n          value={reportType}\r\n          onChange={(e) => setReportType(e.target.value)}\r\n        >\r\n          <option value=\"usage-statistics\">Usage Statistics</option>\r\n          <option value=\"questionbank-generation-summaries\">Question Bank Generation Summaries</option>\r\n          <option value=\"system-health-reports\">System Health Reports</option>\r\n        </select>\r\n      </div>\r\n\r\n      {/* Date Range Selection */}\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"start-date\">Start Date:</label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"start-date\"\r\n          value={startDate}\r\n          onChange={(e) => setStartDate(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"end-date\">End Date:</label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"end-date\"\r\n          value={endDate}\r\n          onChange={(e) => setEndDate(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      {/* Generate Report Button */}\r\n      <button onClick={handleGenerateReport}>Generate Report</button>\r\n\r\n      {/* Export Options */}\r\n      <div className=\"export-options\">\r\n        <h3>Export Options:</h3>\r\n        <button onClick={() => handleExport('Excel')} disabled={!reportData}>Export as Excel</button>\r\n        <button onClick={() => handleExport('PDF')} disabled={!reportData}>Export as PDF</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReportGeneration;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}