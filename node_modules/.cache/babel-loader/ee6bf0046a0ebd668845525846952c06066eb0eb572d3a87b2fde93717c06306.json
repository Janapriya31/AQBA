{"ast":null,"code":"import React,{useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const RequestQuestionBank=()=>{const[selectedTechnology,setSelectedTechnology]=useState('');const[message,setMessage]=useState('');const technologies=['React','Node.js','Python','Java','Data Science','Machine Learning','SQL'];const handleSubmit=e=>{e.preventDefault();if(selectedTechnology){setMessage(`Question bank for ${selectedTechnology} requested successfully!`);// Perform additional logic for requesting question bank\n}else{setMessage('Please select a technology.');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"request-question-bank-container\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"centered-heading\",children:\"Request a Question Bank\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Request a customized question bank for self-assessment.\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"technology-select\",children:\"Select Technology:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"technology-select\",value:selectedTechnology,onChange:e=>setSelectedTechnology(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"-- Choose a technology --\"}),technologies.map((tech,index)=>/*#__PURE__*/_jsx(\"option\",{value:tech,children:tech},index))]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"request-button\",children:\"Request Question Bank\"})]}),message&&/*#__PURE__*/_jsx(\"p\",{className:\"message\",children:message})]});};export default RequestQuestionBank;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","RequestQuestionBank","selectedTechnology","setSelectedTechnology","message","setMessage","technologies","handleSubmit","e","preventDefault","className","children","onSubmit","htmlFor","id","value","onChange","target","map","tech","index","type"],"sources":["C:/Users/janap/OneDrive/Desktop/app/AQBA-AdminWeb/src/employee/pages/RequestQuestionBank.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst RequestQuestionBank = () => {\r\n  const [selectedTechnology, setSelectedTechnology] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  const technologies = [\r\n    'React',\r\n    'Node.js',\r\n    'Python',\r\n    'Java',\r\n    'Data Science',\r\n    'Machine Learning',\r\n    'SQL',\r\n  ];\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (selectedTechnology) {\r\n      setMessage(`Question bank for ${selectedTechnology} requested successfully!`);\r\n      // Perform additional logic for requesting question bank\r\n    } else {\r\n      setMessage('Please select a technology.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"request-question-bank-container\">\r\n      <h2 className=\"centered-heading\">Request a Question Bank</h2>\r\n      <p>Request a customized question bank for self-assessment.</p>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"technology-select\">Select Technology:</label>\r\n        <select\r\n          id=\"technology-select\"\r\n          value={selectedTechnology}\r\n          onChange={(e) => setSelectedTechnology(e.target.value)}\r\n        >\r\n          <option value=\"\">-- Choose a technology --</option>\r\n          {technologies.map((tech, index) => (\r\n            <option key={index} value={tech}>\r\n              {tech}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <button type=\"submit\" className=\"request-button\">\r\n          Request Question Bank\r\n        </button>\r\n      </form>\r\n      {message && <p className=\"message\">{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestQuestionBank;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExC,KAAM,CAAAC,mBAAmB,CAAGA,CAAA,GAAM,CAChC,KAAM,CAACC,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CAChE,KAAM,CAACQ,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAE1C,KAAM,CAAAU,YAAY,CAAG,CACnB,OAAO,CACP,SAAS,CACT,QAAQ,CACR,MAAM,CACN,cAAc,CACd,kBAAkB,CAClB,KAAK,CACN,CAED,KAAM,CAAAC,YAAY,CAAIC,CAAC,EAAK,CAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB,GAAIP,kBAAkB,CAAE,CACtBG,UAAU,CAAC,qBAAqBH,kBAAkB,0BAA0B,CAAC,CAC7E;AACF,CAAC,IAAM,CACLG,UAAU,CAAC,6BAA6B,CAAC,CAC3C,CACF,CAAC,CAED,mBACEL,KAAA,QAAKU,SAAS,CAAC,iCAAiC,CAAAC,QAAA,eAC9Cb,IAAA,OAAIY,SAAS,CAAC,kBAAkB,CAAAC,QAAA,CAAC,yBAAuB,CAAI,CAAC,cAC7Db,IAAA,MAAAa,QAAA,CAAG,yDAAuD,CAAG,CAAC,cAC9DX,KAAA,SAAMY,QAAQ,CAAEL,YAAa,CAAAI,QAAA,eAC3Bb,IAAA,UAAOe,OAAO,CAAC,mBAAmB,CAAAF,QAAA,CAAC,oBAAkB,CAAO,CAAC,cAC7DX,KAAA,WACEc,EAAE,CAAC,mBAAmB,CACtBC,KAAK,CAAEb,kBAAmB,CAC1Bc,QAAQ,CAAGR,CAAC,EAAKL,qBAAqB,CAACK,CAAC,CAACS,MAAM,CAACF,KAAK,CAAE,CAAAJ,QAAA,eAEvDb,IAAA,WAAQiB,KAAK,CAAC,EAAE,CAAAJ,QAAA,CAAC,2BAAyB,CAAQ,CAAC,CAClDL,YAAY,CAACY,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,gBAC5BtB,IAAA,WAAoBiB,KAAK,CAAEI,IAAK,CAAAR,QAAA,CAC7BQ,IAAI,EADMC,KAEL,CACT,CAAC,EACI,CAAC,cACTtB,IAAA,WAAQuB,IAAI,CAAC,QAAQ,CAACX,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CAAC,uBAEjD,CAAQ,CAAC,EACL,CAAC,CACNP,OAAO,eAAIN,IAAA,MAAGY,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAEP,OAAO,CAAI,CAAC,EAC7C,CAAC,CAEV,CAAC,CAED,cAAe,CAAAH,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}