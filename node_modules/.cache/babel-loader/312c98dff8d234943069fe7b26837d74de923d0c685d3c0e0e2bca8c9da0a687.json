{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst cors = require('cors');\nrequire('dotenv').config();\nconst app = express();\napp.use(express.json());\napp.use(cors());\n\n// MongoDB connection\nmongoose.connect(process.env.MONGO_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log('MongoDB connected');\n}).catch(err => console.log('MongoDB connection error:', err));\n\n// User Schema\nconst userSchema = new mongoose.Schema({\n  name: String,\n  username: String,\n  email: String,\n  mobileNumber: String,\n  password: String,\n  role: String,\n  secretCode: String\n});\nconst User = mongoose.model('User', userSchema);\n\n// Registration Route\napp.post('/register', async (req, res) => {\n  const {\n    username,\n    email,\n    password,\n    name,\n    mobileNumber,\n    role,\n    secretCode\n  } = req.body;\n  try {\n    // Check if user already exists\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) {\n      return res.status(400).json({\n        error: 'User already exists'\n      });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create new user\n    const newUser = new User({\n      name,\n      username,\n      email,\n      mobileNumber,\n      password: hashedPassword,\n      role,\n      secretCode: role === 'Administrator' || role === 'Trainer' ? secretCode : null\n    });\n    await newUser.save();\n    res.status(201).json({\n      message: 'User registered successfully'\n    });\n  } catch (error) {\n    console.error('Error registering user:', error);\n    res.status(500).json({\n      error: 'Error registering user'\n    });\n  }\n});\n\n// Login Route\n// Login Route\napp.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    // Find user by username\n    const user = await User.findOne({\n      username\n    });\n\n    // Check if user exists\n    if (!user) {\n      return res.status(401).json({\n        error: 'Invalid username or password'\n      });\n    }\n\n    // Compare password with hashed password\n    const match = await bcrypt.compare(password, user.password);\n    if (!match) {\n      return res.status(401).json({\n        error: 'Invalid username or password'\n      });\n    }\n\n    // Optional: Check the user's role if needed\n    // For example, you can restrict access based on role\n    if (user.role !== 'Administrator') {\n      return res.status(403).json({\n        error: 'Access denied'\n      });\n    }\n\n    // If everything is okay, return user data or a token\n    res.status(200).json({\n      message: 'Login successful',\n      user\n    });\n  } catch (error) {\n    console.error('Error during login:', error);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});\n\n// Start the server\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","mongoose","bcrypt","cors","config","app","use","json","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","userSchema","Schema","name","String","username","email","mobileNumber","password","role","secretCode","User","model","post","req","res","body","existingUser","findOne","status","error","hashedPassword","hash","newUser","save","message","user","match","compare","PORT","listen"],"sources":["C:/Users/janap/OneDrive/Desktop/one drive/OneDrive/Documents/AQBA-AdminWeb/AQBA-AdminWeb/src/admin/pages/AdminLogin.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bcrypt = require('bcrypt');\r\nconst cors = require('cors');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// MongoDB connection\r\nmongoose.connect(process.env.MONGO_URI, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n}).then(() => {\r\n  console.log('MongoDB connected');\r\n}).catch((err) => console.log('MongoDB connection error:', err));\r\n\r\n// User Schema\r\nconst userSchema = new mongoose.Schema({\r\n    name: String,\r\n    username: String,\r\n    email: String,\r\n    mobileNumber: String,\r\n    password: String,\r\n    role: String,\r\n    secretCode: String,\r\n});\r\n\r\nconst User = mongoose.model('User', userSchema);\r\n\r\n// Registration Route\r\napp.post('/register', async (req, res) => {\r\n    const { username, email, password, name, mobileNumber, role, secretCode } = req.body;\r\n\r\n    try {\r\n        // Check if user already exists\r\n        const existingUser = await User.findOne({ email });\r\n        if (existingUser) {\r\n            return res.status(400).json({ error: 'User already exists' });\r\n        }\r\n\r\n        // Hash password\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n        // Create new user\r\n        const newUser = new User({\r\n            name,\r\n            username,\r\n            email,\r\n            mobileNumber,\r\n            password: hashedPassword,\r\n            role,\r\n            secretCode: (role === 'Administrator' || role === 'Trainer') ? secretCode : null,\r\n        });\r\n\r\n        await newUser.save();\r\n        res.status(201).json({ message: 'User registered successfully' });\r\n    } catch (error) {\r\n        console.error('Error registering user:', error);\r\n        res.status(500).json({ error: 'Error registering user' });\r\n    }\r\n});\r\n\r\n// Login Route\r\n// Login Route\r\napp.post('/login', async (req, res) => {\r\n    const { username, password } = req.body;\r\n\r\n    try {\r\n        // Find user by username\r\n        const user = await User.findOne({ username });\r\n\r\n        // Check if user exists\r\n        if (!user) {\r\n            return res.status(401).json({ error: 'Invalid username or password' });\r\n        }\r\n\r\n        // Compare password with hashed password\r\n        const match = await bcrypt.compare(password, user.password);\r\n        if (!match) {\r\n            return res.status(401).json({ error: 'Invalid username or password' });\r\n        }\r\n\r\n        // Optional: Check the user's role if needed\r\n        // For example, you can restrict access based on role\r\n        if (user.role !== 'Administrator') {\r\n            return res.status(403).json({ error: 'Access denied' });\r\n        }\r\n\r\n        // If everything is okay, return user data or a token\r\n        res.status(200).json({ message: 'Login successful', user });\r\n    } catch (error) {\r\n        console.error('Error during login:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\n\r\n// Start the server\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n    console.log(`Server running on port ${PORT}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5BA,OAAO,CAAC,QAAQ,CAAC,CAACI,MAAM,CAAC,CAAC;AAE1B,MAAMC,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrBM,GAAG,CAACC,GAAG,CAACP,OAAO,CAACQ,IAAI,CAAC,CAAC,CAAC;AACvBF,GAAG,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;;AAEf;AACAF,QAAQ,CAACO,OAAO,CAACC,OAAO,CAACC,GAAG,CAACC,SAAS,EAAE;EACtCC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;EACZC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAClC,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAG,IAAKH,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEE,GAAG,CAAC,CAAC;;AAEhE;AACA,MAAMC,UAAU,GAAG,IAAIlB,QAAQ,CAACmB,MAAM,CAAC;EACnCC,IAAI,EAAEC,MAAM;EACZC,QAAQ,EAAED,MAAM;EAChBE,KAAK,EAAEF,MAAM;EACbG,YAAY,EAAEH,MAAM;EACpBI,QAAQ,EAAEJ,MAAM;EAChBK,IAAI,EAAEL,MAAM;EACZM,UAAU,EAAEN;AAChB,CAAC,CAAC;AAEF,MAAMO,IAAI,GAAG5B,QAAQ,CAAC6B,KAAK,CAAC,MAAM,EAAEX,UAAU,CAAC;;AAE/C;AACAd,GAAG,CAAC0B,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEV,QAAQ;IAAEC,KAAK;IAAEE,QAAQ;IAAEL,IAAI;IAAEI,YAAY;IAAEE,IAAI;IAAEC;EAAW,CAAC,GAAGI,GAAG,CAACE,IAAI;EAEpF,IAAI;IACA;IACA,MAAMC,YAAY,GAAG,MAAMN,IAAI,CAACO,OAAO,CAAC;MAAEZ;IAAM,CAAC,CAAC;IAClD,IAAIW,YAAY,EAAE;MACd,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC9B,IAAI,CAAC;QAAE+B,KAAK,EAAE;MAAsB,CAAC,CAAC;IACjE;;IAEA;IACA,MAAMC,cAAc,GAAG,MAAMrC,MAAM,CAACsC,IAAI,CAACd,QAAQ,EAAE,EAAE,CAAC;;IAEtD;IACA,MAAMe,OAAO,GAAG,IAAIZ,IAAI,CAAC;MACrBR,IAAI;MACJE,QAAQ;MACRC,KAAK;MACLC,YAAY;MACZC,QAAQ,EAAEa,cAAc;MACxBZ,IAAI;MACJC,UAAU,EAAGD,IAAI,KAAK,eAAe,IAAIA,IAAI,KAAK,SAAS,GAAIC,UAAU,GAAG;IAChF,CAAC,CAAC;IAEF,MAAMa,OAAO,CAACC,IAAI,CAAC,CAAC;IACpBT,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC9B,IAAI,CAAC;MAAEoC,OAAO,EAAE;IAA+B,CAAC,CAAC;EACrE,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZvB,OAAO,CAACuB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/CL,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC9B,IAAI,CAAC;MAAE+B,KAAK,EAAE;IAAyB,CAAC,CAAC;EAC7D;AACJ,CAAC,CAAC;;AAEF;AACA;AACAjC,GAAG,CAAC0B,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACnC,MAAM;IAAEV,QAAQ;IAAEG;EAAS,CAAC,GAAGM,GAAG,CAACE,IAAI;EAEvC,IAAI;IACA;IACA,MAAMU,IAAI,GAAG,MAAMf,IAAI,CAACO,OAAO,CAAC;MAAEb;IAAS,CAAC,CAAC;;IAE7C;IACA,IAAI,CAACqB,IAAI,EAAE;MACP,OAAOX,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC9B,IAAI,CAAC;QAAE+B,KAAK,EAAE;MAA+B,CAAC,CAAC;IAC1E;;IAEA;IACA,MAAMO,KAAK,GAAG,MAAM3C,MAAM,CAAC4C,OAAO,CAACpB,QAAQ,EAAEkB,IAAI,CAAClB,QAAQ,CAAC;IAC3D,IAAI,CAACmB,KAAK,EAAE;MACR,OAAOZ,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC9B,IAAI,CAAC;QAAE+B,KAAK,EAAE;MAA+B,CAAC,CAAC;IAC1E;;IAEA;IACA;IACA,IAAIM,IAAI,CAACjB,IAAI,KAAK,eAAe,EAAE;MAC/B,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC9B,IAAI,CAAC;QAAE+B,KAAK,EAAE;MAAgB,CAAC,CAAC;IAC3D;;IAEA;IACAL,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC9B,IAAI,CAAC;MAAEoC,OAAO,EAAE,kBAAkB;MAAEC;IAAK,CAAC,CAAC;EAC/D,CAAC,CAAC,OAAON,KAAK,EAAE;IACZvB,OAAO,CAACuB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3CL,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAC9B,IAAI,CAAC;MAAE+B,KAAK,EAAE;IAAwB,CAAC,CAAC;EAC5D;AACJ,CAAC,CAAC;;AAGF;AACA,MAAMS,IAAI,GAAGtC,OAAO,CAACC,GAAG,CAACqC,IAAI,IAAI,IAAI;AACrC1C,GAAG,CAAC2C,MAAM,CAACD,IAAI,EAAE,MAAM;EACnBhC,OAAO,CAACC,GAAG,CAAC,0BAA0B+B,IAAI,EAAE,CAAC;AACjD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}